# Define Sobolev Norm (L2)
def sobolev_loss(pred, target, order=1, weight=1.0):
    """Compute the Sobolev loss focusing on the first and higher-order derivative losses."""
    loss = F.mse_loss(pred, target)

    for i in range(1, order + 1):
        # X derivative up to the specified order
        diff_pred_x = torch.diff(pred, n=i, dim=-1)
        diff_target_x = torch.diff(target, n=i, dim=-1)

        # Y derivative up to the specified order
        diff_pred_y = torch.diff(pred, n=i, dim=-2)
        diff_target_y = torch.diff(target, n=i, dim=-2)

        # Add these differences squared into loss, scaling for regularity
        loss += weight * (F.mse_loss(diff_pred_x, diff_target_x) + F.mse_loss(diff_pred_y, diff_target_y))

    return loss

# Define Frechet differential norm (alternative definition considering more general derivative)
def frechet_loss(pred, target, weight=1.0):
    """Compute a modified Frechet loss by considering non-linear operations and complex mappings."""
    loss = F.mse_loss(pred, target)

    for i in range(2):
        # Non-linear combination extensions example: quadratic or interaction terms
        pred_squared = torch.square(pred)
        target_squared = torch.square(target)

        # Considering interactions in spatial domains
        interaction_pred_x = torch.einsum('...ij,...kj->...ik', pred, pred)
        interaction_target_x = torch.einsum('...ij,...kj->...ik', target, target)

        interaction_pred_y = torch.einsum('...ji,...jk->...ik', pred, pred)
        interaction_target_y = torch.einsum('...ji,...jk->...ik', target, target)

        # Add these interactions and align them within the loss computation
        loss += weight * (F.mse_loss(interaction_pred_x, interaction_target_x) +
                          F.mse_loss(interaction_pred_y, interaction_target_y))

    return loss

# New functions to calculate Sobolev norms and embedding estimates
def sobolev_norm(u, k, p):
    """Compute the Sobolev norm and return an estimate of max|u(x)|."""
    norm = torch.tensor(0.0, device=u.device)
    norm += torch.sum(torch.abs(u)**p)**(1 / p)

    for order in range(1, k + 1):
        if order == 1:
            du_h = F.pad(u[:, :, 1:] - u[:, :, :-1], (0, 1, 0, 0))
            du_v = F.pad(u[:, :, :, 1:] - u[:, :, :, :-1], (0, 0, 0, 1))
            norm += torch.sum(torch.abs(du_h)**p)**(1/p) + torch.sum(torch.abs(du_v)**p)**(1/p)
        else:
            du_hh = F.pad(du_h[:, :, 1:] - du_h[:, :, :-1], (0, 1, 0, 0))
            du_vv = F.pad(du_v[:, :, :, 1:] - du_v[:, :, :, :-1], (0, 0, 0, 1))
            norm += torch.sum(torch.abs(du_hh)**p)**(1/p) + torch.sum(torch.abs(du_vv)**p)**(1/p)

    # Estimate max|u(x)| using Sobolev embedding theorem in 2D
    C = 1.0  # constant from the embedding theorem, adjust as necessary
    max_abs_estimate = C * norm

    return norm, max_abs_estimate

def sobolev_norm_embedded(u, k, p):
    """Compute the Sobolev norm and related estimates."""
    norm = torch.tensor(0.0, device=u.device)
    norm += torch.sum(torch.abs(u)**p)**(1 / p)

    for order in range(1, k + 1):
        if order == 1:
            du_h = F.pad(u[:, :, 1:] - u[:, :, :-1], (0, 1, 0, 0))
            du_v = F.pad(u[:, :, :, 1:] - u[:, :, :, :-1], (0, 0, 0, 1))
            norm += torch.sum(torch.abs(du_h)**p)**(1/p) + torch.sum(torch.abs(du_v)**p)**(1/p)
        else:
            du_hh = F.pad(du_h[:, :, 1:] - du_h[:, :, :-1], (0, 1, 0, 0))
            du_vv = F.pad(du_v[:, :, :, 1:] - du_v[:, :, :, :-1], (0, 0, 0, 1))
            norm += torch.sum(torch.abs(du_hh)**p)**(1/p) + torch.sum(torch.abs(du_vv)**p)**(1/p)

    max_abs_estimate = None
    c0_semi_norm_estimate = None

    if k >= 1:
        C_max_abs = 1.0  # Calibration needed for practical use
        max_abs_estimate = C_max_abs * norm

        if k == 1:
            n = 2  # Image with 2D domain
            C_c0 = 1.0  # Calibration needed for C0,1âˆ’n/p type norm
            semi_norm_factor = 1 - n / p
            c0_semi_norm_estimate = C_c0 * norm ** semi_norm_factor

    return norm, max_abs_estimate, c0_semi_norm_estimate
